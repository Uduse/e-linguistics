# e-Linguistic Toolkit: igt
#
# Copyright (C) 2008 ELTK Project
# Author: Scott Farrar <farrar@u.washington.edu>
# URL: <http://e-linguistics.org>
# For license information, see LICENSE.TXT

import codecs
from xml.dom.minidom import *
from eltk.utils.CharConverter import *

"""
This module contains classes used to create interlinear glossed text meant for display

"""

#abstract class?
#class AlignedText:
#
#    def __init__(self):







class IGT:

    """
    Phonetic or phonological transcriptions paired with a gloss, a translation and optionally a note.
    """
    

    def __init__(self,p,g,t,n=''):
	self.source=p	
	self.glosses=g
	self.translation=t
	self.note=n


    def validate(self):
        
        if len(self.source)!=len(self.glosses):
            
            print self    

    def __str__(self):
        """
        Returns a tab delimited string representation of IGT, not pretty-printed
        """

        s=''
        
        
        for i in self.source:
            for j in i:
                s=s+j+'\t'
        s=s+'\n' 
        
        for g in self.glosses:
            for j in g:
                s=s+str(j)+'\t'
        s=s+'\n'
        
        s=s+self.translation+'\n'
        
        s=s+self.note
        
        return s



class IGTCollection:
    """
    A list of IGT objects with various ways to output them
    """
    def __init__(self,igts):
        self.igts=igts

    def toDOM(self):
        
        xmldoc=Document()

        root=xmldoc.createElement('igt_instances')
        xmldoc.appendChild(root)
        
        #add each igt instance
        for i in igts:

            igt_elem=xmldoc.createElement('igt')
            root.appendChild(igt_elem)
            
                
            

            #build the aligned objects
            for x in range(len(i.phons)):

                a_elem=xmldoc.createElement('aligned_obj')
                igt_elem.appendChild(a_elem)

                m_elem=xmldoc.createElement('form')
                a_elem.appendChild(m_elem)

                t1=xmldoc.createTextNode(i.phons[x])
                m_elem.appendChild(t1)

                g_elem=xmldoc.createElement('gloss')
                a_elem.appendChild(g_elem)


                t2=xmldoc.createTextNode(i.glosses[x])
                g_elem.appendChild(t2)

            #build translations
            trans_elem=xmldoc.createElement('translation')
            igt_elem.appendChild(trans_elem)

            t3=xmldoc.createTextNode(i.translation)
            trans_elem.appendChild(t3)

        return xmldoc


    def toLatex(self,out_file):
       
        #r=TableReader()
        converter=CharConverter('ipa','tipa')
        #map=ipa_tipa.getMap(0,4)
        


        
        latex_header=u'%This document was autogenerated using from  a Python script.\n\documentclass[letter,12pt]{article}\n\\usepackage{linguex}\n\n\\usepackage[tone,extra]{tipa}\n\n\\begin{document}\n\n'
        outfile=codecs.open(out_file,'w','utf-8')
        outfile.write(latex_header)

        for i in self.igts:
                

            outfile.write(u'\exg.')
            outfile.write(u'\t')

            p=printTipaList(i.phons)
            #print p
            #convert from ipa to tipa 
            #p=stringReplace(map,p)
            p=converter.convert(p)
            #print p
            p=tipaClean(p)
            #print p+'\n'
            outfile.write(p+u'\\\\\n')

            


            #take care of ctrl char's in latex
            g=u'\t'+printList(i.glosses)+u'\\\\\n'
            g=g.replace('_','\_')
            outfile.write(g)
            outfile.write(u'\t'+i.translation+u'\n\n')
        outfile.write(u'\n\n\end{document}')
        outfile.close()


    def toStndOut(self):
        """
        For testing: group together IGTs to standard out
        """
        for i in self.igts:
            i.printPretty()


